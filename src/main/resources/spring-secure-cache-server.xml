<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:gfe="http://www.springframework.org/schema/gemfire"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/gemfire http://www.springframework.org/schema/gemfire/spring-gemfire.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

	<context:component-scan base-package="demo.pivotal.dao" />
	<context:component-scan base-package="demo.pivotal.datasync" />

	<!-- Generic properties that we can set, such as where to store data and 
		log files -->
	<context:property-placeholder
		system-properties-mode="OVERRIDE" location="classpath:/common.properties" />

	<!-- gemfire.properties file for the cache server -->
	<bean id="props"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath:gemfire-server.properties</value>
			</list>
		</property>
		<property name="properties">
			<value>locators=${locator.host1}[${locator.port1}],${locator.host2}[${locator.port2}]
			</value>
		</property>
	</bean>

	<!-- when we run multiple cache servers on the same node, we need unique 
		server ports -->
	<bean id="portGenerator" class="demo.pivotal.util.ServerPortGenerator" />

	<!-- create a unique directory base directory for this node -->
	<bean id="findDiskDir" class="demo.pivotal.util.PersistenceDirectoryGenerator"
		destroy-method="unlock" init-method="findDirectory">
		<property name="parent" value="${data.location}" />
	</bean>

	<bean id="cache-logger" class="demo.pivotal.util.CacheLogger" />

	<!-- gemfire base cache configuration -->
	<gfe:cache id="cache" properties-ref="props"
		cache-xml-location="classpath:cache-server.xml" />

	<!-- this makes the cache server be a 'server' in the grid -->
	<gfe:cache-server id="advanced-config" auto-startup="true"
		cache-ref="cache" port="#{portGenerator.generatePort()}" />

	<!-- A persistent disk store to use when storing data for persistence, overflow, 
		etc. -->
	<gfe:disk-store id="localStore" max-oplog-size="10"
		cache-ref="cache">
		<gfe:disk-dir location="#{findDiskDir.getSelected().getAbsolutePath()}"
			max-size="10" />
	</gfe:disk-store>

	<!-- GEMFIRE REGION DEFINITIONS -->
	<gfe:partitioned-region id="DUMMY" copies="1"
		cache-ref="cache">
		<gfe:cache-writer ref="dummy-cache-writer" />
	</gfe:partitioned-region>

	<gfe:replicated-region id="RESORT" cache-ref="cache"
		>
		<gfe:cache-listener ref="cache-logger" />
	</gfe:replicated-region>

	<gfe:partitioned-region id="DUMMY_EXPIRE"
		copies="1" cache-ref="cache">
		<gfe:entry-ttl timeout="1" action="DESTROY" />
		<gfe:cache-writer ref="dummy-cache-writer" />
	</gfe:partitioned-region>

	<gfe:partitioned-region id="DUMMY_EVICT" copies="1"
		cache-ref="cache" disk-store-ref="localStore">
		<gfe:cache-writer ref="dummy-cache-writer" />
		<gfe:eviction threshold="2" type="ENTRY_COUNT" action="OVERFLOW_TO_DISK" />
	</gfe:partitioned-region>

	<bean id="gtDummy" class="org.springframework.data.gemfire.GemfireTemplate"
		p:region-ref="DUMMY" />

	<bean id="gtResort" class="org.springframework.data.gemfire.GemfireTemplate"
		p:region-ref="RESORT" />

	<gfe:partitioned-region id="LOAN" copies="1" cache-ref="cache">
		<gfe:cache-writer ref="dummy-cache-writer" />
	</gfe:partitioned-region>
	<bean id="gtLoan" class="org.springframework.data.gemfire.GemfireTemplate"
		p:region-ref="LOAN" />

	<gfe:partitioned-region id="LOANLINEITEM" copies="1" cache-ref="cache" colocated-with="LOAN">
		<gfe:cache-writer ref="dummy-cache-writer" />
	</gfe:partitioned-region>
	<bean id="gtLoanLineItem" class="org.springframework.data.gemfire.GemfireTemplate"
		p:region-ref="LOANLINEITEM" />

	<!-- RESORT INJECTOR BEAN -->
	<bean id="InjectorBean" class="demo.pivotal.etl.InjectorBean"
		init-method="loadData">
		<property name="gtResort" ref="gtResort" />
		<property name="resortItemReader" ref="resortItemReader" />
		<property name="gtLoan" ref="gtLoan" />
		<property name="loanItemReader" ref="loanItemReader" />
		<property name="gtLoanLineItem" ref="gtLoanLineItem" />
		<property name="loanLineItemReader" ref="loanLineItemReader" />
		<property name="loadData" value="${load.data.boolean}" />
	</bean>

	<!-- DATABASE WRITE THROUGH BEANS -->
	<bean id="dummy-cache-writer" class="demo.pivotal.datasync.DummyCacheWriter" />

	<!-- SPRING BATCH STUFF -->
	<bean id="resortItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">
		<property name="resource" value="classpath:/data/RESORTS.csv" />
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="quoteCharacter" value="&quot;" />
						<property name="names" value="ID,Name" />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean class="demo.pivotal.etl.ResortMapper" />
				</property>
			</bean>
		</property>
		<property name="linesToSkip" value="1" />
	</bean>

	<bean id="loanItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">
		<property name="resource" value="classpath:/data/LOAN.csv" />
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="quoteCharacter" value="&quot;" />
						<property name="names" value="casefileId,lenderLoanNumber,borrowerLastName,executionType,remittanceType,servicing,rateLockExpirationDate,noteRate,loanAmount,submittedCommitmentExpirationDate,passThrough,passThroughPrice,netSRP,passThroughPriceNetSRP,product,userId" />
					</bean>
				</property>
				<property name="fieldSetMapper">
						<bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper"
							p:targetType="demo.pivotal.domain.Loan" />
				</property>
			</bean>
		</property>
		<property name="linesToSkip" value="1" />
	</bean>

	<bean id="loanLineItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">
		<property name="resource" value="classpath:/data/LOANITEM.csv" />
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="quoteCharacter" value="&quot;" />
						<property name="names" value="loanKey,lineItemId,paymentDate,amount" />
					</bean>
				</property>
				<property name="fieldSetMapper">
						<bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper"
							p:targetType="demo.pivotal.domain.LoanLineItem" />
				</property>
			</bean>
		</property>
		<property name="linesToSkip" value="1" />
	</bean>

	<!-- Bean to register functions for execution -->
	<gfe:function-service>
		<gfe:function>
			<bean class="demo.pivotal.function.AggregateField2Function" />
			<bean class="demo.pivotal.function.JoinQuery" />
		</gfe:function>
	</gfe:function-service>

	<!-- Spring Security -->
	<security:authentication-manager id="authenticationManager">
		<security:authentication-provider>
			<security:user-service>
				<security:user name="jimi" password="jimispassword"
					authorities="ROLE_USER, ROLE_ADMIN" />
				<security:user name="bob" password="bobspassword"
					authorities="ROLE_USER" />
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>

	<bean class="demo.pivotal.security.SpringSecurityAuthenticator"
		p:manager-ref="authenticationManager" />

	<bean class="demo.pivotal.security.RoleBasedAccessControl" />

</beans>
